apiVersion: v1
kind: Service
metadata:
  name: development-webserver-service
spec:
  selector:
    app: rails
    server: web
  #type: ClusterIP
  type: NodePort

  ports:
  - port: 3000
    targetPort: 8080
    nodePort: 30000
  ports:
  - port: 3000
    targetPort: 8080
    nodePort: 30000
---
# Deployment の定義
apiVersion: apps/v1
kind: Deployment
metadata:
  # この Deployment の名前
  name: web
  # この Deployment につけるラベル
  labels:
    app: rails

# 管理する ReplicaSet の定義
spec:
  # 展開するレプリカ数
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  # Label がこれらにマッチした Pod をこの ReplicaSet の配下に置く
  selector:
    matchLabels:
      server: web


  # 展開する Pod の定義
  template:
    metadata:
      # この Pod につける Label
      labels:
        app: rails
        server: web

    spec:
      volumes:
        - name: sockets
          emptyDir: {}
        - name: public
          emptyDir: {}
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloudsql-instance-credentials
        - name: ssl-certs
          hostPath:
            path: /etc/ssl/certs
        - name: cloudsql
          emptyDir: {}

      restartPolicy: Always
      terminationGracePeriodSeconds: 60

      containers:
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.14
          command: ["/cloud_sql_proxy",
                    "-instances=$(SQL_INSTANCE_NAME)=tcp:3306",
                    "-credential_file=/secrets/cloudsql/credentials.json"]
          securityContext:
            runAsUser: 2  # non-root user
            allowPrivilegeEscalation: false
          env:
            - name: SQL_INSTANCE_NAME
              value: ${SQL_INSTANCE_NAME}
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
            - name: ssl-certs
              mountPath: /etc/ssl/certs
            - name: cloudsql
              mountPath: /cloudsql
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "sleep 10"]

        - name: nginx
          # イメージの指定
          image: asia.gcr.io/${PROJECT_NAME}/${CLOUD_REGISTRY_NAME}/web:$CIRCLE_SHA1
          imagePullPolicy: IfNotPresent
          ports:
            # Service から受けるポート
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 5
            successThreshold: 1
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "sleep 5; /usr/sbin/nginx -s quit"]
          volumeMounts:
            - mountPath: /sample_docker/tmp/sockets
              name: sockets
            - mountPath: /public
              name: public

        - name: rails
          image: asia.gcr.io/${PROJECT_NAME}/${CLOUD_REGISTRY_NAME}/app:$CIRCLE_SHA1
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
          args:
            - -c
            - cp -rf /sample_docker/tmp/public/* /sample_docker/public && rm -rf /sample_docker/tmp/public && bundle exec puma -C config/puma.rb
            #- bundle exec rails assets:precompile RAILS_ENV=development && bundle exec puma -C config/puma.rb
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 15
            periodSeconds: 5
            successThreshold: 1
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 5; kill -QUIT `(cat tmp/pids/puma.pid)`"]
          env:
            - name: TZ
              value: Asia/Tokyo
            # - name: RAILS_ENV
            #   value: development
            - name: RAILS_ENV
              value: development
            - name: DB_HOST
              value: 127.0.0.1
            #- name: SECRET_KEY_BASE
            - name: RAILS_MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: secret
                  key: secret_key_base
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: secret
                  key: username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secret
                  key: password
                  #key: rootpass

          volumeMounts:
            - mountPath: /sample_docker/tmp/sockets
              name: sockets
            - mountPath: /sample_docker/public
              name: public
